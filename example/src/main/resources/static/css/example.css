.a {
  display: grid;
  grid-template-columns: auto 1fr;
  justify-self: stretch;
  align-self: stretch;
  grid-column-start: 1;
  grid-column-end: span 3;
}

.b {
  display: inline-grid;
  grid-template-rows: 10px repeat(4, 250px 10px) 20px;
  justify-self: stretch;
  align-self: stretch;
  grid-row-start: 1;
  grid-row-end: span 3;
}

.c {
  grid-column: 1 / span 3;
}

.d {
  grid-column: 1 / 3;
  grid-row: span 2 / 5;
}

.e {
  grid-column-start: 1;
  grid-column-end: 3;
  grid-row-start: 1;
  grid-row-end: 4;
}

.warn {
  grid-column-end: 3;
  grid: subgrid;
  grid-gap: 1rem;
  grid-template-areas: "head head" "nav  main" "foot ....";
}

.warn-gap-rows {
  grid-gap: 1rem;
  grid-template-rows: 1fr 1fr;
  grid-template-areas: "a a" "a a";
}

.warn-gap-rows {
  grid-column-gap: 1rem;
  grid-template-rows: 1fr 1fr;
  grid-template-areas: "b b" "b b";
}

.warn-gap-columns {
  grid-gap: 1rem;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: "c c" "c c";
}

.warn-gap-columns {
  grid-row-gap: 1rem;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: "d d" "d d";
}

.unknown {
  justify-self: start;
  align-self: start;
}

.flex {
  justify-self: flex-end;
  align-self: flex-end;
}

@supports (display: grid) {
  .foo {
    display: grid;
  }
}

@supports (justify-items: start) {
  .foo {
    justify-items: start;
  }
}

.warn {
  grid-auto-columns: 100px;
  grid-auto-rows: 100px;
  grid-auto-flow: column;
  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
  grid-template-rows: repeat(auto-fit, minmax(400px, 1fr));
}

.baz {
  grid-column: span 3;
}

.bar {
  grid-row: span 3;
}

.warn-display-contents {
  display: grid;
}

/* Emit warning if grid enabled */
.warn-display-contents .grid {
  display: contents;
}

.warn_ie_align {
  align-items: center;
  display: grid;
}

.warn_ie_justify {
  justify-items: center;
  display: grid;
}

.warn_ie_justify_content {
  justify-content: center;
  display: grid;
}

.warn_place_items {
  place-items: start end;
  display: grid;
}

.place-self-a {
  place-self: center;
}

.place-self-b {
  place-self: start end;
}

/* must have correct -ms-grid-rows/columns values */
.grid-correct-rows-columns {
  display: grid;
  grid-template-columns: 50px repeat(2, 1fr 2fr) 50px;
  grid-template-rows: repeat(1, auto 100px);
  grid-gap: 20px;
  grid-template-areas: ". . . . . ." ". . . . . .";
}

.warn-auto-flow {
  grid-auto-flow: column;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: ". ." ". .";
}

.center-wrapper {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-areas: ". z z ." ". z z .";
}

.center-item {
  grid-area: z;
  align-self: center;
  justify-self: center;
}

.named {
  grid-template-rows: 1fr;
  grid-template-columns: [content] 1fr;
}

a {
  transition: transform 1s;
  transform: rotateX(45deg);
}

b {
  transform: translateX(45deg);
  transform-origin: 0 0;
}

em {
  transform: rotateZ(45deg);
}

@keyframes anim {
  from {
    transform: rotate(90deg);
  }
}

a {
  background: linear-gradient(350.5deg, white, black), linear-gradient(-130deg, black, white), linear-gradient(45deg, black, white);
}

b {
  background-image: linear-gradient(black, white), linear-gradient(white, black);
}

strong {
  background: linear-gradient(to top, transparent, rgba(0, 0, 0, 0.8) 20px, #000 30px, #000) no-repeat;
}

div {
  background-image: radial-gradient(to left, white, black), repeating-linear-gradient(to bottom right, black, white), repeating-radial-gradient(to top, aqua, red);
}

.old-radial {
  background: radial-gradient(0 50%, ellipse farthest-corner, black, white);
}

.simple1 {
  background: linear-gradient(black, white);
}

.simple2 {
  background: linear-gradient(to left, black 0%, rgba(0, 0, 0, 0.5) 50%, white 100%);
}

.simple3 {
  background: linear-gradient(to left, black 50%, white 100%);
}

.simple4 {
  background: linear-gradient(to right top, black, white);
}

.direction {
  background: linear-gradient(top left, black, rgba(0, 0, 0, 0.5), white);
}

.silent {
  background: -webkit-linear-gradient(top left, black, white);
}

.radial {
  background: radial-gradient(farthest-side at 0 50%, white, black);
}

.second {
  background: red linear-gradient(red, blue);
  background: url("logo.png"), linear-gradient(#fff, #000);
}

.px {
  background: linear-gradient(black 0, white 100px);
}

.list {
  list-style-image: linear-gradient(white, black);
}

.mask {
  mask: linear-gradient(white, black);
}

.newline {
  background-image: linear-gradient(white, black), linear-gradient(black, white);
}

.convert {
  background: linear-gradient(0deg, white, black);
  background: linear-gradient(90deg, white, black);
  background: linear-gradient(180deg, white, black);
  background: linear-gradient(270deg, white, black);
}

.grad {
  background: linear-gradient(1grad, white, black);
}

.rad {
  background: linear-gradient(1rad, white, black);
}

.turn {
  background: linear-gradient(0.3turn, white, black);
}

.norm {
  background: linear-gradient(-90deg, white, black);
}

.mask {
  mask-image: radial-gradient(circle at 86% 86%, transparent 8px, black 8px);
}

.cover {
  background: radial-gradient(ellipse cover at center, white, black);
}

.contain {
  background: radial-gradient(contain at center, white, black);
}

.no-div {
  background: linear-gradient(black);
}

.background-shorthand {
  background: radial-gradient(#FFF, transparent) 0 0/cover no-repeat #F0F;
}

.background-advanced {
  background: radial-gradient(ellipse farthest-corner at 5px 15px, rgba(214, 168, 18, 0.7) 0%, rgba(255, 21, 177, 0.7) 50%, rgba(210, 7, 148, 0.7) 95%), radial-gradient(#FFF, transparent), url(path/to/image.jpg) 50%/cover;
}

.multiradial {
  mask-image: radial-gradient(circle closest-corner at 100% 50%, #000, transparent);
}

.broken {
  mask-image: radial-gradient(white, black);
}

.loop {
  background-image: url("https://test.com/lol(test.png"), radial-gradient(yellow, black, yellow);
}

.none {
  overscroll-behavior: none;
}

.contain {
  overscroll-behavior: contain;
}

.auto {
  overscroll-behavior: auto;
}

.inherit {
  overscroll-behavior: inherit;
}
